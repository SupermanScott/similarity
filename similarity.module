<?php
// $Id: similarity.module,v 1.1.2.12 2009/06/03 05:39:36 scottreynolds Exp $

/**
 * @file similarity.module
 * lovingly crafted by Scott Reynolds
 *
 * Provides a generic scalable methods to draw similarities between node objects.
 * It exposes its data to Views so you may do with it as you will. It also provides
 * configurable blocks for each similarity on the site.
 *
 * Oh ya, and it respects node_access
 */

/**
 * Implementation of hook_cron_queue_info().
 */
function similarity_cron_queue_info() {
  return array(
    'similarity_calculate' => array(
      'worker callback' => 'similarity_calculate_work',
      'time' => variable_get('similarity_calculate_time', 15),
    ),
  );
}

/**
 * DrupalQueue worker callback.
 *
 * @param $job_info
 *  An array of the machine name for the object and the id.
 */
function similarity_calculate_work($job_info) {
  $sim  = similarity_load($job_info['machine_name']);
  $sim->calculate($job_info['id'], $sim->findCandidates());
}

/**
 * Implementation of hook_cron().
 */
function similarity_cron() {
  $queue = drupal_queue_get('similarity_calculate');

  foreach (similarity_all_objects() as $sim) {
    foreach($sim->findCandidates() as $id) {
      if ($queue->createItem(array('machine_name' => $sim->machine_name, 'id' => $id)) == FALSE) {
        // DOH!
      }
    }
  }
}

/**
 * Implementation of hook_ctools_plugin_api().
 */
function similarity_ctools_plugin_api($module, $api) {
  if ($module == 'similarity' && $api == 'similarity_objects') {
    return array('version' => 1);
  }
}

/**
 * Implementation of hook_similarity_objects_default().
 */
function similarity_similarity_objects_default($export_defintion) {
  $export = array();
  $test_object = new stdClass;
  $test_object->api_version = 1;
  $test_object->machine_name = 'test';
  $test_object->options = array(
    'title' => 'Test Object',
    'description' => 'This is a long long long description This is a long long long description This is a long long long description This is a long long long description This is a long long long description This is a long long long description This is a long long long description This is a long long long description This is a long long long description',
    'tokenizer' => array(
      'plugin_id' => 'similarity_taxonomy',
      'options' => array(
        'vid' => 0,
      ),
    ),
    'conditions' => array(
      array(
        'plugin_id' => 'similarity_node_type',
        'options' => array(
          'types' => array(
            'page',
          ),
        ),
      ),
    ),
    'transformers' => array(
      array(
        'plugin_id' => 'similarity_stop_words',
        'options' => array(
          'stop_words' => array(
            'lobortis',
            'incassum',
          ),
        ),
      ),
    ),
  );

  $export['test'] = $test_object;
  return $export;
}

/**
 * Implementation of hook_ctools_plugin_directory().
 */
function similarity_ctools_plugin_directory($module, $plugin) {
  if ($module == 'similarity') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implementation of hook_menu().
 */
function similarity_menu() {
  return array(
    'admin/build/similarity' => array(
      'title' => 'Similarity Objects',
      'page callback' => 'similarity_objects_overview',
      'file' => 'similarity.pages.inc',
      'access arguments' => array('administer similarity'),
    ),
    'admin/build/similarity/delete/%similarity' => array(
      'title callback' => 'similarity_admin_title',
      'title arguments' => array('delete', 4),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('similarity_object_delete', 4),
      'file' => 'similarity.pages.inc',
      'access callback' => 'similarity_delete_access',
      'access arguments' => array(4),
    ),
  );
}

/**
 * Menu title callback.
 */
function similarity_admin_title($op, $similarity_object) {
  return t(drupal_ucfirst($op)) . ' ' . $similarity_object->title();
}

/**
 * Access callback to delete a similarity.
 */
function similarity_delete_access($similarity_object) {
  return $similarity_object->export_type & EXPORT_IN_DATABASE && user_access('administer similarity');
}

/**
 * Implementation of hook_perm().
 */
function similarity_perm() {
  return array('administer similarity');
}

/**
 * Load all similarity objects.
 *
 * @param $load_disabled = FALSE
 *  Whether or not to load disabled similarity objects
 *
 * @return
 *  An array of all similarity objects
 */
function similarity_all_objects($load_disabled = FALSE) {
  $objects = array();
  if (function_exists('ctools_include')) {
    ctools_include('export');
    $exported = ctools_export_load_object('similarity_objects', 'all');
    foreach ($exported as $exported_similarity) {
      if (!empty($exported_similarity->machine_name)) {
        $objects[$exported_similarity->machine_name] = similarity_create($exported_similarity);
      }
    }
  }

  return $objects;
}

/**
 * Load a specific similarity object.
 *
 * @param $machine_name.
 *  Name of the object.
 */
function similarity_load($machine_name) {
  ctools_include('export');
  $matching_objects = ctools_export_load_object('similarity_objects', 'names', array($machine_name));

  if (isset($matching_objects[$machine_name])) {
    return similarity_create($matching_objects[$machine_name]);
  }
  return FALSE;
}

/**
 * Instantiate a given similarity object in memory.
 *
 * @param stdClass $ctools_object
 *  The ctools object from ctools_export_load_object.
 *
 * @return similarity
 *  The fully loaded and instatiated similarity object.
 */
function similarity_create($ctools_object) {
  static $created_similarities = array();
  ctools_include('similarity', 'similarity');
  if (!isset($created_similarities[$ctools_object->machine_name])) {
    $created_similarities[$ctools_object->machine_name] = new Similarity($ctools_object);
  }
  return $created_similarities[$ctools_object->machine_name];
}

// util functions
/**
 * Export a Similarity configuration to code.
 */
function similarity_export($machine_name, $indent = '') {
  ctools_include('export');
  $result = ctools_export_load_object('similarity_object', 'names', array('machine_name' => $machine_name));
  if (isset($result[$machine_name])) {
    return ctools_export_object('similarity_object', $result[$machine_name], $indent);
  }
}

/**
 * Compress an option definition into a multidimensional array.
 *
 * @param $option_definition
 *   A structured Drupal array.
 * @return array
 *   The compressed version of the options.
 */
function similarity_compress_option_definition($option_definition) {
  $options = array();
  foreach (element_children($option_definition) as $key) {
    if (isset($option_definition[$key]['#default_value'])) {
      $options[$key] = $option_definition[$key]['#default_value'];
    }
    else {
      $options[$key] = similarity_compress_option_definition($option_definition[$key]);
    }
  }

  return $options;
}

/**
 * Compile a set of options from the defaults and the provided options.
 *
 * @param $options
 *   The provided options that will override the defaults.
 * @param $default_options
 *   The default options.
 * @return array
 *   The entire option structure with the $options overridding the defaults.
 */
function similarity_compile_options($options, $default_options) {
  $compiled_options = array();

  // If there isn't a default for this, then use the $options as is.
  if (empty($default_options) && !empty($options)) {
    $compiled_options = $options;
  }
  // If there are no more overrides, use the defaults as is
  elseif (empty($options)) {
    $compiled_options = $default_options;
  }
  // Otherwise, compile them together.
  else {
    foreach ($default_options as $key => $option) {
      if (is_array($option)) {
        if (!isset($options[$key])) {
          $options[$key] = array();
        }
        $compiled_options[$key] = similarity_compile_options($options[$key], $default_options[$key]);
      }
      elseif (isset($options[$key]) && !is_array($options[$key])) {
        $compiled_options[$key] = $options[$key];
      }
      else {
        $compiled_options[$key] = $default_options[$key];
      }
    }
  }

  return $compiled_options;
}

/**
 * Implementation of hook_theme().
 */
function similarity_theme() {
  $theme_path = drupal_get_path('module', 'similarity') . '/theme';
  return array(
    'similarity_object_overview' => array(
      'arguments' => array('element' => NULL),
      'file' => 'theme/theme.inc',
    ),
  );
}