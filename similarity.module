<?php
// $Id: similarity.module,v 1.1.2.12 2009/06/03 05:39:36 scottreynolds Exp $

/**
 * @file similarity.module
 * lovingly crafted by Scott Reynolds
 *
 * Provides a generic scalable methods to draw similarities between node objects.
 * It exposes its data to Views so you may do with it as you will. It also provides
 * configurable blocks for each similarity on the site.
 *
 * Oh ya, and it respects node_access
 */

/**
 * Implementation of hook_ctools_plugin_api().
 */
function similarity_ctools_plugin_api($module, $api) {
  if ($module == 'similarity' && $api == 'similarity_objects') {
    return array('version' => 1);
  }
}

/**
 * Implementation of hook_similarity_objects_default().
 */
function similarity_similarity_objects_default($export_defintion) {
  $export = array();
  $test_object = new stdClass;
  $test_object->api_version = 1;
  $test_object->machine_name = 'test';
  $test_object->options = array(
    'title' => 'Test Object',
    'tokenizer' => 'similarity_taxonomy',
  );

  $export['test'] = $test_object;
  return $export;
}

/**
 * Implementation of hook_similarity_library().
 */
function similarity_similarity_library() {
  $library = array(
    'conditions' => array(),
    'tokenizer' => array(
      'similarity_search' => array(
        'title' => t('Search Index'),
        'function' => 'similarity_search_tokens',
      ),
      'similarity_taxonomy' => array(
        'title' => t('Taxonomy'),
        'function' => 'similarity_taxonomy_tokens',
      ),
    ),
    'transformer' => array(),
    'algorithm' => array(
      'similarity_cosine' => array(
        'title' => t('Cosine Similarity'),
        'function' => 'similarity_cosine',
      ),
    ),
  );

  foreach (array('tokenizer', 'transformer', 'algorithm') as $type) {
    foreach (array_keys($library[$type]) as $library_callbacks) {
      $library[$type][$library_callbacks] += array(
        'path' => 'includes',
        'file' => 'similarity_library',
        'module' => 'similarity',
        'base' => array('node'),
      );
    }
  }

  return $library;
}

/**
 * Implementation of hook_menu().
 */
function similarity_menu() {
  return array(
    'admin/build/similarity' => array(
      'title' => 'Similarity Objects',
      'page callback' => 'similarity_objects_overview',
      'file' => 'similarity.pages',
      'access arguments' => array('administer similarity'),
    ),
  );
}

/**
 * Implementation of hook_perm().
 */
function similarity_perm() {
  return array('administer similarity');
}

/**
 * Load all similarity objects.
 *
 * @param $load_disabled = FALSE
 *  Whether or not to load disabled similarity objects
 *
 * @return
 *  An array of all similarity objects
 */
function similarity_all_objects($load_disabled = FALSE) {
  $objects = array();
  if (function_exists('ctools_include')) {
    ctools_include('export');
    $exported = ctools_export_load_object('similarity_objects', 'all');
    foreach ($exported as $exported_similarity) {
      if (!empty($exported_similarity->machine_name)) {
        $objects[$exported_similarity->machine_name] = similarity_create($exported_similarity);
      }
    }
  }

  return $objects;
}

/**
 * Instantiate a given similarity object in memory.
 *
 * @param stdClass $ctools_object
 *  The ctools object from ctools_export_load_object.
 *
 * @return similarity
 *  The fully loaded and instatiated similarity object.
 */
function similarity_create($ctools_object) {
  ctools_include('similarity', 'similarity');
  return new Similarity($ctools_object->machine_name, $ctools_object->options);
}

// util functions
/**
 * Export a Similarity configuration to code.
 */
function similarity_export($machine_name, $indent = '') {
  ctools_include('export');
  $result = ctools_export_load_object('similarity_object', 'names', array('machine_name' => $machine_name));
  if (isset($result[$machine_name])) {
    return ctools_export_object('similarity_object', $result[$machine_name], $indent);
  }
}

/**
 * Load up all library functions.
 */
function similarity_load_library() {
  static $library = NULL;
  if (!isset($libraries)) {
    $library = module_invoke_all('similarity_library');
    drupal_alter('similarity_library', $libraries);
  }

  return $library;
}

/**
 * Load a specific library callback.
 *
 * @param $type
 *  The library callback type.
 *
 * @param $callback_id
 *  The unique id for this callback.
 */
function similarity_load_callback($type, $callback_id) {
  $library = similarity_load_library();
  return $library[$type][$callback_id];
}

/**
 * Load a library function and return its result.
 *
 * @param $type
 *  library function type.
 *
 * @param $callback_id
 *  Name of the function.
 *
 * @param $params
 *  The parameters to pass into the function.
 */
function similarity_execute_library($type, $callback_id, $params = array()) {
  $callback = similarity_load_callback($type, $callback_id);

  if (isset($callback['path'], $callback['file'], $callback['module'])) {
    ctools_include($callback['file'], $callback['module'], $callback['path']);
  }

  return call_user_func_array($callback['function'], $params);
}