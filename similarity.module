<?php
// $Id: similarity.module,v 1.1.2.12 2009/06/03 05:39:36 scottreynolds Exp $

/**
 * @file similarity.module
 * lovingly crafted by Scott Reynolds
 *
 * Provides a generic scalable methods to draw similarities between node objects.
 * It exposes its data to Views so you may do with it as you will. It also provides
 * configurable blocks for each similarity on the site.
 *
 * Oh ya, and it respects node_access
 */

/**
 * Implementation of hook_cron_queue_info().
 */
function similarity_cron_queue_info() {
  $queues = array();
  foreach (similarity_all_objects() as $similarity) {
    $queues["similarity_calculate_{$similarity->machine_name}"] = array(
      'worker callback' => 'similarity_calculate_work',
      'time' => $similarity->options['max_time'],
    );
  }
  return $queues;
}

/**
 * DrupalQueue worker callback.
 *
 * @param $job_info
 *  An array of the machine name for the object and the id.
 */
function similarity_calculate_work($job_info) {
  $sim  = similarity_load($job_info['machine_name']);
  $sim->calculate($job_info['id'], $sim->findCandidates());
}

/**
 * Implementation of hook_ctools_plugin_api().
 */
function similarity_ctools_plugin_api($module, $api) {
  if ($module == 'similarity' && $api == 'similarity_objects') {
    return array('version' => 1);
  }
}

/**
 * Implementation of hook_views_api().
 */
function similarity_views_api() {
  return array(
    'path' => drupal_get_path('module', 'similarity') . '/views',
    'api' => 2.0,
  );
}

/**
 * Implementation of hook_flush_caches().
 */
function similarity_flush_caches() {
  // @TODO: should each object have its own cache table.
  return array(
    'cache_similarity_tokens',
  );
}

/**
 * Implementation of hook_ctools_plugin_directory().
 */
function similarity_ctools_plugin_directory($module, $plugin_type) {
  if ($module == 'similarity') {
    return 'plugins/' . $plugin_type;
  }
}

/**
 * Implementation of hook_menu().
 */
function similarity_menu() {
  $items = array(
    'admin/build/similarity' => array(
      'title' => 'Similarity Objects',
      'page callback' => 'similarity_objects_overview',
      'file' => 'similarity.pages.inc',
      'access arguments' => array('administer similarity'),
    ),
    'admin/build/similarity/list' => array(
      'title' => t('List'),
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => 0,
    ),
    'admin/build/similarity/add' => array(
      'title' => t('Add'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('similarity_add_object_form'),
      'file' => 'similarity.pages.inc',
      'access arguments' => array('administer similarity'),
      'type' => MENU_LOCAL_TASK,
      'weight' => -1,
    ),
    'admin/build/similarity/import' => array(
      'title' => 'Import',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('similarity_import_form'),
      'access arguments' => array('administer similarity'),
      'type' => MENU_LOCAL_TASK,
      'file' => 'similarity.pages.inc',
    ),
    'admin/build/similarity/export/%similarity_cache' => array(
      'title callback' => 'similarity_admin_title',
      'title arguments' => array('export', 4),
      'page callback' => 'similarity_export_page',
      'page arguments' => array(4),
      'access callback' => 'user_access',
      'access arguments' => array('administer similarity'),
      'file' => 'similarity.pages.inc',
    ),
    'admin/build/similarity/delete/%similarity_cache' => array(
      'title callback' => 'similarity_admin_title',
      'title arguments' => array('delete', 4),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('similarity_object_delete', 4),
      'file' => 'similarity.pages.inc',
      'access callback' => 'similarity_delete_access',
      'access arguments' => array(4),
    ),
    'admin/build/similarity/edit/%similarity_cache' => array(
      'title callback' => 'similarity_admin_title',
      'title arguments' => array('edit', 4),
      'page callback' => 'similarity_settings_page',
      'page arguments' => array(4),
      'file' => 'similarity.pages.inc',
      'access callback' => 'user_access',
      'access arguments' => array('administer similarity'),
    ),
    'admin/build/similarity/edit/%similarity_cache/%ctools_js' => array(
      'title callback' => 'similarity_admin_title',
      'title arguments' => array('edit', 4),
      'page callback' => 'similarity_settings_page',
      'page arguments' => array(4,5),
      'file' => 'similarity.pages.inc',
      'access callback' => 'user_access',
      'access arguments' => array('administer similarity'),
    ),
    'admin/build/similarity/batch/%similarity' => array(
      'title callback' => 'similarity_admin_title',
      'title arguments' => array('batch import', 4),
      'page callback' => 'similarity_batch_import',
      'page arguments' => array(4),
      'access callback' => 'similarity_admin_link',
      'access arguments' => array(4, 'administer similarity'),
      'file' => 'similarity.pages.inc',
    ),
  );

  return $items;
}

/**
 * Menu title callback.
 */
function similarity_admin_title($op, $similarity_object) {
  $edit = '';
  if ($similarity_object->from_cache) {
    $edit = '(' . t('Not Committed') . ')';
  }
  return t(drupal_ucfirst($op) . ' @title !edit', array('@title' => $similarity_object->title(), '!edit' => $edit));
}

/**
 * Access callback to delete a similarity.
 */
function similarity_delete_access($similarity_object) {
  return ($similarity_object->export_type & EXPORT_IN_DATABASE || $similarity_object->from_cache) && user_access('administer similarity');
}

/**
 * Access callback for admin links not protected by FAPI.
 *
 * @param Similarity $similarity
 *  The similarity for the link, used by drupal_valid_token.
 * @param $access_string
 *  The string to call user_access against.
 */
function similarity_admin_link(Similarity $similarity, $access_string) {
  if (drupal_valid_token($_GET['token'], $similarity->machine_name)) {
    return user_access($access_string);
  }
  return FALSE;
}

/**
 * Implementation of hook_perm().
 */
function similarity_perm() {
  return array('administer similarity');
}

/**
 * Element validation for the min sim form item.
 */
function similarity_validate_min_sim($element, &$form_state) {
  form_set_value($element, $element['#value'] / 100, $form_state);
}

/**
 * Load all similarity objects.
 *
 * @param $load_disabled = FALSE
 *  Whether or not to load disabled similarity objects
 *
 * @return
 *  An array of all similarity objects
 */
function similarity_all_objects($load_disabled = FALSE) {
  $objects = array();
  if (function_exists('ctools_include')) {
    ctools_include('export');
    $exported = ctools_export_load_object('similarity_objects', 'all');
    foreach ($exported as $exported_similarity) {
      if (!empty($exported_similarity->machine_name)) {
        $objects[$exported_similarity->machine_name] = similarity_create($exported_similarity);
      }
    }
  }

  return $objects;
}

/**
 * Load a specific similarity object.
 *
 * @param $machine_name.
 *  Name of the object.
 */
function similarity_load($machine_name) {
  ctools_include('export');
  $matching_objects = ctools_export_load_object('similarity_objects', 'names', array($machine_name));

  if (isset($matching_objects[$machine_name])) {
    return similarity_create($matching_objects[$machine_name]);
  }
  return FALSE;
}

/**
 * Instantiate a given similarity object in memory.
 *
 * @param stdClass $ctools_object
 *  The ctools object from ctools_export_load_object.
 *
 * @return similarity
 *  The fully loaded and instatiated similarity object.
 */
function similarity_create($ctools_object) {
  static $created_similarities = array();
  ctools_include('similarity', 'similarity');
  if (!isset($created_similarities[$ctools_object->machine_name])) {
    $created_similarities[$ctools_object->machine_name] = new Similarity($ctools_object);
  }
  return $created_similarities[$ctools_object->machine_name];
}

/**
 * Implementation of hook_nodeapi().
 */
function similarity_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($op == 'insert') {
    similarity_node_insert($node);
  }
  if ($op == 'update') {
    similarity_node_update($node);
  }
}

/**
 * Implementation of hook_node_insert().
 */
function similarity_node_insert($node) {
  foreach (similarity_all_objects() as $sim) {
    $queue = drupal_queue_get("similarity_calculate_{$sim->machine_name}");
    $sim->resetCandidates();
    $canidates = $sim->findCandidates();
    if (in_array($node->nid, $canidates)) {
      $queue->createItem(array('machine_name' => $sim->machine_name, 'id' => $node->nid));
    }
  }
}

/**
 * Implementation of hook_node_update().
 */
function similarity_node_update($node) {
  foreach (similarity_all_objects() as $sim) {
    $queue = drupal_queue_get("similarity_calculate_{$sim->machine_name}");
    cache_clear_all($sim->machine_name . ':' . $node->nid, 'cache_similarity_tokens');

    // Find all the nids that are affected by this update and queue them up.
    foreach ($sim->updateIndex($node->nid) as $nid) {
      $queue->createItem(array('machine_name' => $sim->machine_name, 'id' => $nid));
    }
  }
}

/**
 * Implementation of Ctools Export list callback.
 */
function similarity_similarity_objects_list() {
  $options = array();
  foreach (similarity_all_objects() as $machine_name => $similarity) {
    $options[$machine_name] = $similarity->title();
  }

  return $options;
}

// util functions
/**
 * Export a Similarity configuration to code.
 */
function similarity_export($ctools_object, $indent = '') {
  ctools_include('export');
  return ctools_export_object('similarity_objects', $ctools_object, $indent);
}

/**
 * Compress an option definition into a multidimensional array.
 *
 * @param $option_definition
 *   A structured Drupal array.
 * @return array
 *   The compressed version of the options.
 */
function similarity_compress_option_definition($option_definition) {
  $options = array();
  foreach (element_children($option_definition) as $key) {
    if (isset($option_definition[$key]['#default_value'])) {
      $options[$key] = $option_definition[$key]['#default_value'];
    }
    else {
      $options[$key] = similarity_compress_option_definition($option_definition[$key]);
    }
  }

  return $options;
}

/**
 * Compile a set of options from the defaults and the provided options.
 *
 * @param $options
 *   The provided options that will override the defaults.
 * @param $default_options
 *   The default options.
 * @return array
 *   The entire option structure with the $options overridding the defaults.
 */
function similarity_compile_options($options, $default_options) {
  $compiled_options = array();

  // If there isn't a default for this, then use the $options as is.
  if (empty($default_options) && !empty($options)) {
    $compiled_options = $options;
  }
  // If there are no more overrides, use the defaults as is
  elseif (empty($options)) {
    $compiled_options = $default_options;
  }
  // Otherwise, compile them together.
  else {
    foreach ($default_options as $key => $option) {
      if (is_array($option)) {
        if (!isset($options[$key])) {
          $options[$key] = array();
        }
        $compiled_options[$key] = similarity_compile_options($options[$key], $default_options[$key]);
      }
      elseif (isset($options[$key]) && !is_array($options[$key])) {
        $compiled_options[$key] = $options[$key];
      }
      else {
        $compiled_options[$key] = $default_options[$key];
      }
    }
  }

  return $compiled_options;
}

/**
 * Save a similarity to the database.
 */
function similarity_save(Similarity $similarity) {
  $result = drupal_write_record('similarity_objects', $similarity, 'machine_name');
  if (!db_affected_rows()) {
    drupal_write_record('similarity_objects', $similarity);
  }

  similarity_reset_similarity($similarity);
  
  $queue = drupal_queue_get("similarity_calculate_{$similarity->machine_name}");
  // Queue up all objects for recalculation.
  foreach ($similarity->findCandidates() as $candiate) {
    $queue->createItem(array('machine_name' => $similarity->machine_name, 'id' => $candiate));
  }
}

/**
 * Reset the data store for the similarity.
 *
 * @param Similarity $similarity
 *   The similarity to reset.
 */
function similarity_reset_similarity(Similarity $similarity) {
  // Clear its caches.
  foreach (similarity_flush_caches() as $cache_table) {
    cache_clear_all($similarity->machine_name, $cache_table, TRUE);
  }

  // Handle queued up items.
  $queue = drupal_queue_get("similarity_calculate_{$similarity->machine_name}");
  $queue->deleteQueue();
}


/**
 * Delete a similarity from the database.
 */
function similarity_delete(Similarity $similarity) {
  db_query("DELETE FROM {similarity_objects} WHERE machine_name = '%s'", $similarity->machine_name);
  similarity_cache_remove($similarity);

  similarity_reset_similarity($similarity);
}

/**
 * Get the cached changes for a similarity.
 */
function similarity_cache_load($machine_name) {
  ctools_include('object-cache');
  ctools_include('similarity', 'similarity');
  ctools_include('plugins');
  ctools_include('export');
  $cache = ctools_object_cache_get('similarity_objects', $machine_name);
  if (!$cache) {
    $cache = similarity_load($machine_name);
    $cache->locked = ctools_object_cache_test('similarity_objects', $machine_name);
  }

  return $cache;
}

/**
 * Save a similarity to the object cache.
 */
function similarity_cache_save(Similarity $similarity) {
  ctools_include('object-cache');
  $similarity->from_cache = TRUE;
  $cache = ctools_object_cache_set('similarity_objects', $similarity->machine_name, $similarity);
}

/**
 * Remove a similarity from the object cache.
 */
function similarity_cache_remove(Similarity $similarity) {
  ctools_include('object-cache');
  ctools_object_cache_clear('similarity_objects', $similarity->machine_name);
}

/**
 * Implementation of hook_theme().
 */
function similarity_theme() {
  $theme_path = drupal_get_path('module', 'similarity') . '/theme';
  return array(
    'similarity_object_overview' => array(
      'arguments' => array('element' => NULL),
      'file' => 'theme/theme.inc',
    ),
    'similarity_edit_container' => array(
      'arguments' => array('container' => NULL),
      'file' => 'theme/theme.inc',
    ),
  );
}