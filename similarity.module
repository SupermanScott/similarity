<?php
// $Id: similarity.module,v 1.1.2.12 2009/06/03 05:39:36 scottreynolds Exp $

/**
 * @file similarity.module
 * lovingly crafted by Scott Reynolds
 *
 * Provides a generic scalable methods to draw similarities between node objects.
 * It exposes its data to Views so you may do with it as you will. It also provides
 * configurable blocks for each similarity on the site.
 *
 * Oh ya, and it respects node_access
 */

/**
 * Implementation of hook_cron_queue_info().
 */
function similarity_cron_queue_info() {
  $queues = array();
  foreach (similarity_all_objects() as $similarity) {
    $queues["similarity_calculate_{$similarity->machine_name}"] = array(
      'worker callback' => 'similarity_calculate_work',
      'time' => $similarity->options['max_time'],
    );
  }
  return $queues;
}

/**
 * DrupalQueue worker callback.
 *
 * @param $job_info
 *  An array of the machine name for the object and the id.
 */
function similarity_calculate_work($job_info) {
  $sim  = similarity_load($job_info['machine_name']);
  $sim->calculate($job_info['id'], $sim->findCandidates());
}

/**
 * Implementation of hook_ctools_plugin_api().
 */
function similarity_ctools_plugin_api($module, $api) {
  if ($module == 'similarity' && $api == 'similarity_objects') {
    return array('version' => 1);
  }
}

/**
 * Implementation of hook_views_api().
 */
function similarity_views_api() {
  return array(
    'path' => drupal_get_path('module', 'similarity') . '/views',
    'api' => 2.0,
  );
}

/**
 * Implementation of hook_flush_caches().
 */
function similarity_flush_caches() {
  // @TODO: should each object have its own cache table.
  return array(
    'cache_similarity_tokens',
  );
}

/**
 * Implementation of hook_similarity_objects_default().
 */
function similarity_similarity_objects_default($export_defintion) {
  $export = array();
  $similarity_object = new stdClass;
  $similarity_object->disabled = FALSE; /* Edit this to true to make a default similarity_object disabled initially */
  $similarity_object->api_version = 1;
  $similarity_object->machine_name = 'test';
  $similarity_object->options = array(
    'title' => 'Test Object',
    'description' => 'This is a long long long description This is a long long long description This is a long long long description This is a long long long description This is a long long long description This is a long long long description This is a long long long description This is a long long long description This is a long long long description',
    'min_sim' => 0.95,
    'max_time' => '30',
    'base' => 'node',
    'base_field' => 'nid',
    'conditions' => array(
      '0' => array(
        'plugin_id' => 'similarity_node_type',
        'options' => array(
          'types' => array(
            '0' => 'page',
          ),
        ),
      ),
    ),
    'tokenizers' => array(
      '0' => array(
        'plugin_id' => 'similarity_taxonomy',
        'options' => array(
          'vid' => 0,
        ),
      ),
    ),
    'transformers' => array(
      '0' => array(
        'plugin_id' => 'similarity_stop_words',
        'options' => array(
          'stop_words' => array(
            '0' => 'a',
            '1' => 'able',
            '2' => 'about',
            '3' => 'above',
            '4' => 'abroad',
            '5' => 'according',
            '6' => 'accordingly',
            '7' => 'across',
            '8' => 'actually',
            '9' => 'adj',
            '10' => 'after',
            '11' => 'afterwards',
            '12' => 'again',
            '13' => 'against',
            '14' => 'ago',
            '15' => 'ahead',
            '16' => 'aint',
            '17' => 'all',
            '18' => 'allow',
            '19' => 'allows',
            '20' => 'almost',
            '21' => 'alone',
            '22' => 'along',
            '23' => 'alongside',
            '24' => 'already',
            '25' => 'also',
            '26' => 'although',
            '27' => 'always',
            '28' => 'am',
            '29' => 'amid',
            '30' => 'amidst',
            '31' => 'among',
            '32' => 'amongst',
            '33' => 'an',
            '34' => 'and',
            '35' => 'another',
            '36' => 'any',
            '37' => 'anybody',
            '38' => 'anyhow',
            '39' => 'anyone',
            '40' => 'anything',
            '41' => 'anyway',
            '42' => 'anyways',
            '43' => 'anywhere',
            '44' => 'apart',
            '45' => 'appear',
            '46' => 'appreciate',
            '47' => 'appropriate',
            '48' => 'are',
            '49' => 'arent',
            '50' => 'around',
            '51' => 'as',
            '52' => 'as',
            '53' => 'aside',
            '54' => 'ask',
            '55' => 'asking',
            '56' => 'associated',
            '57' => 'at',
            '58' => 'available',
            '59' => 'away',
            '60' => 'awfully',
            '61' => 'b',
            '62' => 'back',
            '63' => 'backward',
            '64' => 'backwards',
            '65' => 'be',
            '66' => 'became',
            '67' => 'because',
            '68' => 'become',
            '69' => 'becomes',
            '70' => 'becoming',
            '71' => 'been',
            '72' => 'before',
            '73' => 'beforehand',
            '74' => 'begin',
            '75' => 'behind',
            '76' => 'being',
            '77' => 'believe',
            '78' => 'below',
            '79' => 'beside',
            '80' => 'besides',
            '81' => 'best',
            '82' => 'better',
            '83' => 'between',
            '84' => 'beyond',
            '85' => 'both',
            '86' => 'brief',
            '87' => 'but',
            '88' => 'by',
            '89' => 'c',
            '90' => 'came',
            '91' => 'can',
            '92' => 'cannot',
            '93' => 'cant',
            '94' => 'cant',
            '95' => 'caption',
            '96' => 'cause',
            '97' => 'causes',
            '98' => 'certain',
            '99' => 'certainly',
            '100' => 'changes',
            '101' => 'clearly',
            '102' => 'cmon',
            '103' => 'co',
            '104' => 'co.',
            '105' => 'com',
            '106' => 'come',
            '107' => 'comes',
            '108' => 'concerning',
            '109' => 'consequently',
            '110' => 'consider',
            '111' => 'considering',
            '112' => 'contain',
            '113' => 'containing',
            '114' => 'contains',
            '115' => 'corresponding',
            '116' => 'could',
            '117' => 'couldnt',
            '118' => 'course',
            '119' => 'cs',
            '120' => 'currently',
            '121' => 'd',
            '122' => 'dare',
            '123' => 'darent',
            '124' => 'definitely',
            '125' => 'described',
            '126' => 'despite',
            '127' => 'did',
            '128' => 'didnt',
            '129' => 'different',
            '130' => 'directly',
            '131' => 'do',
            '132' => 'does',
            '133' => 'doesnt',
            '134' => 'doing',
            '135' => 'done',
            '136' => 'dont',
            '137' => 'down',
            '138' => 'downwards',
            '139' => 'during',
            '140' => 'e',
            '141' => 'each',
            '142' => 'edu',
            '143' => 'eg',
            '144' => 'eight',
            '145' => 'eighty',
            '146' => 'either',
            '147' => 'else',
            '148' => 'elsewhere',
            '149' => 'end',
            '150' => 'ending',
            '151' => 'enough',
            '152' => 'entirely',
            '153' => 'especially',
            '154' => 'et',
            '155' => 'etc',
            '156' => 'even',
            '157' => 'ever',
            '158' => 'evermore',
            '159' => 'every',
            '160' => 'everybody',
            '161' => 'everyone',
            '162' => 'everything',
            '163' => 'everywhere',
            '164' => 'ex',
            '165' => 'exactly',
            '166' => 'example',
            '167' => 'except',
            '168' => 'f',
            '169' => 'fairly',
            '170' => 'far',
            '171' => 'farther',
            '172' => 'few',
            '173' => 'fewer',
            '174' => 'fifth',
            '175' => 'first',
            '176' => 'five',
            '177' => 'followed',
            '178' => 'following',
            '179' => 'follows',
            '180' => 'for',
            '181' => 'forever',
            '182' => 'former',
            '183' => 'formerly',
            '184' => 'forth',
            '185' => 'forward',
            '186' => 'found',
            '187' => 'four',
            '188' => 'from',
            '189' => 'further',
            '190' => 'furthermore',
            '191' => 'g',
            '192' => 'get',
            '193' => 'gets',
            '194' => 'getting',
            '195' => 'given',
            '196' => 'gives',
            '197' => 'go',
            '198' => 'goes',
            '199' => 'going',
            '200' => 'gone',
            '201' => 'got',
            '202' => 'gotten',
            '203' => 'greetings',
            '204' => 'h',
            '205' => 'had',
            '206' => 'hadnt',
            '207' => 'half',
            '208' => 'happens',
            '209' => 'hardly',
            '210' => 'has',
            '211' => 'hasnt',
            '212' => 'have',
            '213' => 'havent',
            '214' => 'having',
            '215' => 'he',
            '216' => 'hed',
            '217' => 'hell',
            '218' => 'hello',
            '219' => 'help',
            '220' => 'hence',
            '221' => 'her',
            '222' => 'here',
            '223' => 'hereafter',
            '224' => 'hereby',
            '225' => 'herein',
            '226' => 'heres',
            '227' => 'hereupon',
            '228' => 'hers',
            '229' => 'herself',
            '230' => 'hes',
            '231' => 'hi',
            '232' => 'him',
            '233' => 'himself',
            '234' => 'his',
            '235' => 'hither',
            '236' => 'hopefully',
            '237' => 'how',
            '238' => 'howbeit',
            '239' => 'however',
            '240' => 'hundred',
            '241' => 'i',
            '242' => 'id',
            '243' => 'ie',
            '244' => 'if',
            '245' => 'ignored',
            '246' => 'ill',
            '247' => 'im',
            '248' => 'immediate',
            '249' => 'in',
            '250' => 'inasmuch',
            '251' => 'inc',
            '252' => 'inc.',
            '253' => 'indeed',
            '254' => 'indicate',
            '255' => 'indicated',
            '256' => 'indicates',
            '257' => 'inner',
            '258' => 'inside',
            '259' => 'insofar',
            '260' => 'instead',
            '261' => 'into',
            '262' => 'inward',
            '263' => 'is',
            '264' => 'isnt',
            '265' => 'it',
            '266' => 'itd',
            '267' => 'itll',
            '268' => 'its',
            '269' => 'its',
            '270' => 'itself',
            '271' => 'ive',
            '272' => 'j',
            '273' => 'just',
            '274' => 'k',
            '275' => 'keep',
            '276' => 'keeps',
            '277' => 'kept',
            '278' => 'know',
            '279' => 'known',
            '280' => 'knows',
            '281' => 'l',
            '282' => 'last',
            '283' => 'lately',
            '284' => 'later',
            '285' => 'latter',
            '286' => 'latterly',
            '287' => 'least',
            '288' => 'less',
            '289' => 'lest',
            '290' => 'let',
            '291' => 'lets',
            '292' => 'like',
            '293' => 'liked',
            '294' => 'likely',
            '295' => 'likewise',
            '296' => 'little',
            '297' => 'look',
            '298' => 'looking',
            '299' => 'looks',
            '300' => 'low',
            '301' => 'lower',
            '302' => 'ltd',
            '303' => 'm',
            '304' => 'made',
            '305' => 'mainly',
            '306' => 'make',
            '307' => 'makes',
            '308' => 'many',
            '309' => 'may',
            '310' => 'maybe',
            '311' => 'maynt',
            '312' => 'me',
            '313' => 'mean',
            '314' => 'meantime',
            '315' => 'meanwhile',
            '316' => 'merely',
            '317' => 'might',
            '318' => 'mightnt',
            '319' => 'mine',
            '320' => 'minus',
            '321' => 'miss',
            '322' => 'more',
            '323' => 'moreover',
            '324' => 'most',
            '325' => 'mostly',
            '326' => 'mr',
            '327' => 'mrs',
            '328' => 'much',
            '329' => 'must',
            '330' => 'mustnt',
            '331' => 'my',
            '332' => 'myself',
            '333' => 'n',
            '334' => 'name',
            '335' => 'namely',
            '336' => 'nd',
            '337' => 'near',
            '338' => 'nearly',
            '339' => 'necessary',
            '340' => 'need',
            '341' => 'neednt',
            '342' => 'needs',
            '343' => 'neither',
            '344' => 'never',
            '345' => 'neverf',
            '346' => 'neverless',
            '347' => 'nevertheless',
            '348' => 'new',
            '349' => 'next',
            '350' => 'nine',
            '351' => 'ninety',
            '352' => 'no',
            '353' => 'nobody',
            '354' => 'non',
            '355' => 'none',
            '356' => 'nonetheless',
            '357' => 'noone',
            '358' => 'no-one',
            '359' => 'nor',
            '360' => 'normally',
            '361' => 'not',
            '362' => 'nothing',
            '363' => 'notwithstanding',
            '364' => 'novel',
            '365' => 'now',
            '366' => 'nowhere',
            '367' => 'o',
            '368' => 'obviously',
            '369' => 'of',
            '370' => 'off',
            '371' => 'often',
            '372' => 'oh',
            '373' => 'ok',
            '374' => 'okay',
            '375' => 'old',
            '376' => 'on',
            '377' => 'once',
            '378' => 'one',
            '379' => 'ones',
            '380' => 'ones',
            '381' => 'only',
            '382' => 'onto',
            '383' => 'opposite',
            '384' => 'or',
            '385' => 'other',
            '386' => 'others',
            '387' => 'otherwise',
            '388' => 'ought',
            '389' => 'oughtnt',
            '390' => 'our',
            '391' => 'ours',
            '392' => 'ourselves',
            '393' => 'out',
            '394' => 'outside',
            '395' => 'over',
            '396' => 'overall',
            '397' => 'own',
            '398' => 'p',
            '399' => 'particular',
            '400' => 'particularly',
            '401' => 'past',
            '402' => 'per',
            '403' => 'perhaps',
            '404' => 'placed',
            '405' => 'please',
            '406' => 'plus',
            '407' => 'possible',
            '408' => 'presumably',
            '409' => 'probably',
            '410' => 'provided',
            '411' => 'provides',
            '412' => 'q',
            '413' => 'que',
            '414' => 'quite',
            '415' => 'qv',
            '416' => 'r',
            '417' => 'rather',
            '418' => 'rd',
            '419' => 're',
            '420' => 'really',
            '421' => 'reasonably',
            '422' => 'recent',
            '423' => 'recently',
            '424' => 'regarding',
            '425' => 'regardless',
            '426' => 'regards',
            '427' => 'relatively',
            '428' => 'respectively',
            '429' => 'right',
            '430' => 'round',
            '431' => 's',
            '432' => 'said',
            '433' => 'same',
            '434' => 'saw',
            '435' => 'say',
            '436' => 'saying',
            '437' => 'says',
            '438' => 'second',
            '439' => 'secondly',
            '440' => 'see',
            '441' => 'seeing',
            '442' => 'seem',
            '443' => 'seemed',
            '444' => 'seeming',
            '445' => 'seems',
            '446' => 'seen',
            '447' => 'self',
            '448' => 'selves',
            '449' => 'sensible',
            '450' => 'sent',
            '451' => 'serious',
            '452' => 'seriously',
            '453' => 'seven',
            '454' => 'several',
            '455' => 'shall',
            '456' => 'shant',
            '457' => 'she',
            '458' => 'shed',
            '459' => 'shell',
            '460' => 'shes',
            '461' => 'should',
            '462' => 'shouldnt',
            '463' => 'since',
            '464' => 'six',
            '465' => 'so',
            '466' => 'some',
            '467' => 'somebody',
            '468' => 'someday',
            '469' => 'somehow',
            '470' => 'someone',
            '471' => 'something',
            '472' => 'sometime',
            '473' => 'sometimes',
            '474' => 'somewhat',
            '475' => 'somewhere',
            '476' => 'soon',
            '477' => 'sorry',
            '478' => 'specified',
            '479' => 'specify',
            '480' => 'specifying',
            '481' => 'still',
            '482' => 'sub',
            '483' => 'such',
            '484' => 'sup',
            '485' => 'sure',
            '486' => 't',
            '487' => 'take',
            '488' => 'taken',
            '489' => 'taking',
            '490' => 'tell',
            '491' => 'tends',
            '492' => 'th',
            '493' => 'than',
            '494' => 'thank',
            '495' => 'thanks',
            '496' => 'thanx',
            '497' => 'that',
            '498' => 'thatll',
            '499' => 'thats',
            '500' => 'thats',
            '501' => 'thatve',
            '502' => 'the',
            '503' => 'their',
            '504' => 'theirs',
            '505' => 'them',
            '506' => 'themselves',
            '507' => 'then',
            '508' => 'thence',
            '509' => 'there',
            '510' => 'thereafter',
            '511' => 'thereby',
            '512' => 'thered',
            '513' => 'therefore',
            '514' => 'therein',
            '515' => 'therell',
            '516' => 'therere',
            '517' => 'theres',
            '518' => 'theres',
            '519' => 'thereupon',
            '520' => 'thereve',
            '521' => 'these',
            '522' => 'they',
            '523' => 'theyd',
            '524' => 'theyll',
            '525' => 'theyre',
            '526' => 'theyve',
            '527' => 'thing',
            '528' => 'things',
            '529' => 'think',
            '530' => 'third',
            '531' => 'thirty',
            '532' => 'this',
            '533' => 'thorough',
            '534' => 'thoroughly',
            '535' => 'those',
            '536' => 'though',
            '537' => 'three',
            '538' => 'through',
            '539' => 'throughout',
            '540' => 'thru',
            '541' => 'thus',
            '542' => 'till',
            '543' => 'to',
            '544' => 'together',
            '545' => 'too',
            '546' => 'took',
            '547' => 'toward',
            '548' => 'towards',
            '549' => 'tried',
            '550' => 'tries',
            '551' => 'truly',
            '552' => 'try',
            '553' => 'trying',
            '554' => 'ts',
            '555' => 'twice',
            '556' => 'two',
            '557' => 'u',
            '558' => 'un',
            '559' => 'under',
            '560' => 'underneath',
            '561' => 'undoing',
            '562' => 'unfortunately',
            '563' => 'unless',
            '564' => 'unlike',
            '565' => 'unlikely',
            '566' => 'until',
            '567' => 'unto',
            '568' => 'up',
            '569' => 'upon',
            '570' => 'upwards',
            '571' => 'us',
            '572' => 'use',
            '573' => 'used',
            '574' => 'useful',
            '575' => 'uses',
            '576' => 'using',
            '577' => 'usually',
            '578' => 'v',
            '579' => 'value',
            '580' => 'various',
            '581' => 'versus',
            '582' => 'very',
            '583' => 'via',
            '584' => 'viz',
            '585' => 'vs',
            '586' => 'w',
            '587' => 'want',
            '588' => 'wants',
            '589' => 'was',
            '590' => 'wasnt',
            '591' => 'way',
            '592' => 'we',
            '593' => 'wed',
            '594' => 'welcome',
            '595' => 'well',
            '596' => 'well',
            '597' => 'went',
            '598' => 'were',
            '599' => 'were',
            '600' => 'werent',
            '601' => 'weve',
            '602' => 'what',
            '603' => 'whatever',
            '604' => 'whatll',
            '605' => 'whats',
            '606' => 'whatve',
            '607' => 'when',
            '608' => 'whence',
            '609' => 'whenever',
            '610' => 'where',
            '611' => 'whereafter',
            '612' => 'whereas',
            '613' => 'whereby',
            '614' => 'wherein',
            '615' => 'wheres',
            '616' => 'whereupon',
            '617' => 'wherever',
            '618' => 'whether',
            '619' => 'which',
            '620' => 'whichever',
            '621' => 'while',
            '622' => 'whilst',
            '623' => 'whither',
            '624' => 'who',
            '625' => 'whod',
            '626' => 'whoever',
            '627' => 'whole',
            '628' => 'wholl',
            '629' => 'whom',
            '630' => 'whomever',
            '631' => 'whos',
            '632' => 'whose',
            '633' => 'why',
            '634' => 'will',
            '635' => 'willing',
            '636' => 'wish',
            '637' => 'with',
            '638' => 'within',
            '639' => 'without',
            '640' => 'wonder',
            '641' => 'wont',
            '642' => 'would',
            '643' => 'wouldnt',
            '644' => 'x',
            '645' => 'y',
            '646' => 'yes',
            '647' => 'yet',
            '648' => 'you',
            '649' => 'youd',
            '650' => 'youll',
            '651' => 'your',
            '652' => 'youre',
            '653' => 'yours',
            '654' => 'yourself',
            '655' => 'yourselves',
            '656' => 'youve',
            '657' => 'z',
            '658' => 'zero',
          ),
        ),
      ),
    ),
    'algorithms' => array(
      'plugin_id' => 'similarity_cosine',
      'options' => array(),
    ),
  );

  $export[$similarity_object->machine_name] = $similarity_object;
  return $export;
}

/**
 * Implementation of hook_ctools_plugin_directory().
 */
function similarity_ctools_plugin_directory($module, $plugin_type) {
  if ($module == 'similarity') {
    return 'plugins/' . $plugin_type;
  }
}

/**
 * Implementation of hook_menu().
 */
function similarity_menu() {
  return array(
    'admin/build/similarity' => array(
      'title' => 'Similarity Objects',
      'page callback' => 'similarity_objects_overview',
      'file' => 'similarity.pages.inc',
      'access arguments' => array('administer similarity'),
    ),
    'admin/build/similarity/list' => array(
      'title' => t('List'),
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => 0,
    ),
    'admin/build/similarity/add' => array(
      'title' => t('Add'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('similarity_add_object_form'),
      'file' => 'similarity.pages.inc',
      'access arguments' => array('administer similarity'),
      'type' => MENU_LOCAL_TASK,
      'weight' => -1,
    ),
    'admin/build/similarity/export/%similarity_cache' => array(
      'title callback' => 'similarity_admin_title',
      'title arguments' => array('export', 4),
      'page callback' => 'similarity_export_page',
      'page arguments' => array(4),
      'access callback' => 'user_access',
      'access arguments' => array('administer similarity'),
      'file' => 'similarity.pages.inc',
    ),
    'admin/build/similarity/delete/%similarity_cache' => array(
      'title callback' => 'similarity_admin_title',
      'title arguments' => array('delete', 4),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('similarity_object_delete', 4),
      'file' => 'similarity.pages.inc',
      'access callback' => 'similarity_delete_access',
      'access arguments' => array(4),
    ),
    'admin/build/similarity/edit/%similarity_cache' => array(
      'title callback' => 'similarity_admin_title',
      'title arguments' => array('edit', 4),
      'page callback' => 'similarity_settings_page',
      'page arguments' => array(4),
      'file' => 'similarity.pages.inc',
      'access callback' => 'user_access',
      'access arguments' => array('administer similarity'),
    ),
    'admin/build/similarity/edit/%similarity_cache/%ctools_js' => array(
      'title callback' => 'similarity_admin_title',
      'title arguments' => array('edit', 4),
      'page callback' => 'similarity_settings_page',
      'page arguments' => array(4,5),
      'file' => 'similarity.pages.inc',
      'access callback' => 'user_access',
      'access arguments' => array('administer similarity'),
    ),
  );
}

/**
 * Menu title callback.
 */
function similarity_admin_title($op, $similarity_object) {
  $edit = '';
  if ($similarity_object->from_cache) {
    $edit = '(' . t('Not Saved') . ')';
  }
  return t(drupal_ucfirst($op) . ' @title !edit', array('@title' => $similarity_object->title(), '!edit' => $edit));
}

/**
 * Access callback to delete a similarity.
 */
function similarity_delete_access($similarity_object) {
  return ($similarity_object->export_type & EXPORT_IN_DATABASE || $similarity_object->from_cache) && user_access('administer similarity');
}

/**
 * Implementation of hook_perm().
 */
function similarity_perm() {
  return array('administer similarity');
}

/**
 * Load all similarity objects.
 *
 * @param $load_disabled = FALSE
 *  Whether or not to load disabled similarity objects
 *
 * @return
 *  An array of all similarity objects
 */
function similarity_all_objects($load_disabled = FALSE) {
  $objects = array();
  if (function_exists('ctools_include')) {
    ctools_include('export');
    $exported = ctools_export_load_object('similarity_objects', 'all');
    foreach ($exported as $exported_similarity) {
      if (!empty($exported_similarity->machine_name)) {
        $objects[$exported_similarity->machine_name] = similarity_create($exported_similarity);
      }
    }
  }

  return $objects;
}

/**
 * Load a specific similarity object.
 *
 * @param $machine_name.
 *  Name of the object.
 */
function similarity_load($machine_name) {
  ctools_include('export');
  $matching_objects = ctools_export_load_object('similarity_objects', 'names', array($machine_name));

  if (isset($matching_objects[$machine_name])) {
    return similarity_create($matching_objects[$machine_name]);
  }
  return FALSE;
}

/**
 * Instantiate a given similarity object in memory.
 *
 * @param stdClass $ctools_object
 *  The ctools object from ctools_export_load_object.
 *
 * @return similarity
 *  The fully loaded and instatiated similarity object.
 */
function similarity_create($ctools_object) {
  static $created_similarities = array();
  ctools_include('similarity', 'similarity');
  if (!isset($created_similarities[$ctools_object->machine_name])) {
    $created_similarities[$ctools_object->machine_name] = new Similarity($ctools_object);
  }
  return $created_similarities[$ctools_object->machine_name];
}

/**
 * Implementation of hook_nodeapi().
 */
function similarity_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($op == 'insert') {
    similarity_node_insert($node);
  }
  if ($op == 'update') {
    similarity_node_update($node);
  }
}

/**
 * Implementation of hook_node_insert().
 */
function similarity_node_insert($node) {
  foreach (similarity_all_objects() as $sim) {
    $queue = drupal_queue_get("similarity_calculate_{$sim->machine_name}");
    $sim->resetCandidates();
    $canidates = $sim->findCandidates();
    if (in_array($node->nid, $canidates)) {
      $queue->createItem(array('machine_name' => $sim->machine_name, 'id' => $node->nid));
    }
  }
}

/**
 * Implementation of hook_node_update().
 */
function similarity_node_update($node) {
  foreach (similarity_all_objects() as $sim) {
    // @TODO: how do handle the node update.
    cache_clear_all($sim->machine_name . ':' . $node->nid, 'cache_similarity_tokens');
  }
}

// util functions
/**
 * Export a Similarity configuration to code.
 */
function similarity_export(Similarity $similarity, $indent = '') {
  ctools_include('export');
  return ctools_export_object('similarity_objects', $similarity->exportObject(), $indent);
}

/**
 * Compress an option definition into a multidimensional array.
 *
 * @param $option_definition
 *   A structured Drupal array.
 * @return array
 *   The compressed version of the options.
 */
function similarity_compress_option_definition($option_definition) {
  $options = array();
  foreach (element_children($option_definition) as $key) {
    if (isset($option_definition[$key]['#default_value'])) {
      $options[$key] = $option_definition[$key]['#default_value'];
    }
    else {
      $options[$key] = similarity_compress_option_definition($option_definition[$key]);
    }
  }

  return $options;
}

/**
 * Compile a set of options from the defaults and the provided options.
 *
 * @param $options
 *   The provided options that will override the defaults.
 * @param $default_options
 *   The default options.
 * @return array
 *   The entire option structure with the $options overridding the defaults.
 */
function similarity_compile_options($options, $default_options) {
  $compiled_options = array();

  // If there isn't a default for this, then use the $options as is.
  if (empty($default_options) && !empty($options)) {
    $compiled_options = $options;
  }
  // If there are no more overrides, use the defaults as is
  elseif (empty($options)) {
    $compiled_options = $default_options;
  }
  // Otherwise, compile them together.
  else {
    foreach ($default_options as $key => $option) {
      if (is_array($option)) {
        if (!isset($options[$key])) {
          $options[$key] = array();
        }
        $compiled_options[$key] = similarity_compile_options($options[$key], $default_options[$key]);
      }
      elseif (isset($options[$key]) && !is_array($options[$key])) {
        $compiled_options[$key] = $options[$key];
      }
      else {
        $compiled_options[$key] = $default_options[$key];
      }
    }
  }

  return $compiled_options;
}

/**
 * Save a similarity to the database.
 */
function similarity_save(Similarity $similarity) {
  $result = drupal_write_record('similarity_objects', $similarity, 'machine_name');
  if (!db_affected_rows()) {
    drupal_write_record('similarity_objects', $similarity);
  }

  // Clear its caches.
  foreach (similarity_flush_caches() as $cache_table) {
    cache_clear_all('*', $cache_table, TRUE);
  }

  // Handle queued up items.
  $queue = drupal_queue_get("similarity_calculate_{$similarity->machine_name}");
  $queue->deleteQueue();

  // Queue up all objects for recalculation.
  foreach ($similarity->findCandidates() as $candiate) {
    $queue->createItem(array('machine_name' => $similarity->machine_name, 'id' => $candiate));
  }
}

/**
 * Get the cached changes for a similarity.
 */
function similarity_cache_load($machine_name) {
  ctools_include('object-cache');
  ctools_include('similarity', 'similarity');
  ctools_include('plugins');
  ctools_include('export');
  $cache = ctools_object_cache_get('similarity_objects', $machine_name);
  if (!$cache) {
    $cache = similarity_load($machine_name);
    $cache->locked = ctools_object_cache_test('similarity_objects', $machine_name);
  }

  return $cache;
}

/**
 * Save a similarity to the object cache.
 */
function similarity_cache_save(Similarity $similarity) {
  ctools_include('object-cache');
  $similarity->from_cache = TRUE;
  $cache = ctools_object_cache_set('similarity_objects', $similarity->machine_name, $similarity);
}

/**
 * Remove a similarity from the object cache.
 */
function similarity_cache_remove(Similarity $similarity) {
  ctools_include('object-cache');
  ctools_object_cache_clear('similarity_objects', $similarity->machine_name);
}

/**
 * Implementation of hook_theme().
 */
function similarity_theme() {
  $theme_path = drupal_get_path('module', 'similarity') . '/theme';
  return array(
    'similarity_object_overview' => array(
      'arguments' => array('element' => NULL),
      'file' => 'theme/theme.inc',
    ),
    'similarity_edit_container' => array(
      'arguments' => array('container' => NULL),
      'file' => 'theme/theme.inc',
    ),
  );
}